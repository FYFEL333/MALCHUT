# bot.py  ‚Äî  all‚Äêin‚Äêone  (2025‚Äê04‚Äê17)

import time, json, requests, logging, os, csv, glob

from config import TOKEN, OWNER_ID, DATA_DIR

API_URL = f"https://api.telegram.org/bot{TOKEN}/"

offset       = 0
users        = {}        # user_id ‚Üí state dict
progress     = {}        # user_id ‚Üí set –±—É–∫–≤
achievements = {}        # user_id ‚Üí {'letters':bool,'dict':bool,'rules':bool,'dict_done':set}

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ----------
MAIN_MENU_BUTTONS = [
    ["üî§ –ê–ª—Ñ–∞–≤–∏—Ç", "üìú –ü—Ä–∞–≤–∏–ª–∞"],
    ["üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üìñ –°–ª–æ–≤–∞—Ä—å"]
]

def kb(rows):
    return {"keyboard": rows, "resize_keyboard": True}

def tg(method, data=None, retries=3):
    for _ in range(retries):
        try:
            r = requests.post(f"{API_URL}{method}", json=data, timeout=20)
            if r.ok:
                return r.json()
        except Exception as e:
            logging.warning(f"{method} fail: {e}")
        time.sleep(1)

def send(chat_id, text, markup=None):
    tg("sendMessage", {"chat_id": chat_id, "text": text,
                       "parse_mode": "HTML", "reply_markup": markup})

# ---------- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ----------
def handle_start(chat_id):
    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MALKHUT üßø</b>\n"
        "<i>Mission of Ancient Letters ‚Ä¢ Knowledge Held Under Truth</i>\n\n"
        "–ö–∞–∂–¥–∞—è –±—É–∫–≤–∞ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–∫.\n"
        "–≠—Ç–æ —Å–≤–µ—Ç. –°–º—ã—Å–ª. –ß–∞—Å—Ç–∏—Ü–∞ —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª —Å–æ—Ç–≤–æ—Ä–µÃà–Ω –º–∏—Ä.\n\n"
        "–ó–¥–µ—Å—å —Ç—ã:\n"
        "üî† –ò–∑—É—á–∏—à—å –∏–≤—Ä–∏—Ç—Å–∫–∏–∏ÃÜ –∞–ª—Ñ–∞–≤–∏—Ç\n"
        "üß† –ü–æ–∏ÃÜ–º–µÃà—à—å –≥–ª—É–±–∏–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã\n"
        "‚ú® –ü—Ä–æ–∏ÃÜ–¥–µÃà—à—å –ø—É—Ç—å –æ—Ç –ø–µ—Ä–≤–æ–∏ÃÜ –±—É–∫–≤—ã –¥–æ —Å–≤–µ—Ç–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è\n"
        "üèÜ –ü–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–≤–æ–∏ÃÜ –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        "<b>–ù–∞–∂–º–∏ ¬´–ê–ª—Ñ–∞–≤–∏—Ç¬ª –≤ –º–µ–Ω—é ‚Äî –∏ –Ω–∞—á–Ω–∏ –ø—É—Ç—å.\n–Ø–∑—ã–∫ –¢–≤–æ—Ä–µ–Ω–∏—è –∂–¥–µÃà—Ç —Ç–µ–±—è!</b>"
    )
    try:
        with open("intro.gif", "rb") as f:           # –µ—Å–ª–∏ MP4 ‚Üí sendVideo
            files = {"animation": f}
            data  = {
                "chat_id": chat_id,
                "caption": caption,
                "parse_mode": "HTML",
                "reply_markup": json.dumps({
                    "keyboard": MAIN_MENU_BUTTONS,
                    "resize_keyboard": True
                })
            }
            requests.post(f"{API_URL}sendAnimation", data=data, files=files, timeout=20)
    except Exception as e:
        print("Intro send fail:", e)
        send(chat_id, caption, kb(MAIN_MENU_BUTTONS))

# ---------- –¥–∞–Ω–Ω—ã–µ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª ----------
with open(os.path.join(DATA_DIR, "alphabet.json"), encoding="utf-8") as f:
    ALPHA = json.load(f)

with open(os.path.join(DATA_DIR, "rules.json"), encoding="utf-8") as f:
    RULES = json.load(f)

# ---------- —Å–ª–æ–≤–∞—Ä–∏ ----------
DICT_DIR   = os.path.join(DATA_DIR, "dictionary")
DICT_EMOJI = {
    "animals": "ü¶Å –ñ–∏–≤–æ—Ç–Ω—ã–µ",
    "weather": "‚õÖ –ü–æ–≥–æ–¥–∞",
    "love":    "‚ù§Ô∏è –õ—é–±–æ–≤—å",
    "family":  "üë™ –°–µ–º—å—è",
    "travel":  "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
}
dictionaries = {}
for path in glob.glob(os.path.join(DICT_DIR, "*.csv")):
    cat = os.path.splitext(os.path.basename(path))[0].lower()
    if cat not in DICT_EMOJI:
        continue
    with open(path, newline="", encoding="utf-8") as f:
        reader = csv.reader(f)
        dictionaries[cat] = [tuple(row[:3]) for row in reader if row]

# ---------- –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è ----------
def congrats_alpha(chat_id, uid):
    send(chat_id,
         "üéâ <b>–ú–æ–ª–æ–¥–µ—Ü! –¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤–µ—Å—å –∞–ª—Ñ–∞–≤–∏—Ç!</b>\n"
         "–¢–µ–ø–µ—Ä—å –±—É–∫–≤—ã –∏–≤—Ä–∏—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ‚Äî —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è, –∞ –Ω–µ –∑–∞–≥–∞–¥–∫–∞.\n"
         "–ó–∞–≥–ª—è–Ω–∏ –≤ ¬´üìñ –°–ª–æ–≤–∞—Ä—å¬ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–∏ÃÜ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!",
         kb([["üè† –ú–µ–Ω—é"]]))
    achievements.setdefault(uid, {})["letters"] = True

def congrats_rules(chat_id, uid):
    send(chat_id,
         "üéâ <b>–ú–æ–ª–æ–¥–µ—Ü! –¢—ã –ø—Ä–æ—á–µÃà–ª –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞!</b>",
         kb([["üè† –ú–µ–Ω—é"]]))
    achievements.setdefault(uid, {})["rules"] = True

# ---------- –∞–ª—Ñ–∞–≤–∏—Ç ----------
def show_letter(chat_id, uid):
    idx    = users[uid]["idx"] % len(ALPHA)
    letter = ALPHA[idx]
    text = (
        f"üî§ –ë—É–∫–≤–∞ No{idx+1}: {letter['char']}\n"
        f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {letter['name']}\n"
        f"üîä –ó–≤—É–∫: {letter['sound']}\n"
    )
    if "sofit" in letter:
        text += f"‚úçÔ∏è –°–æ—Ñ–∏—Ç: {letter['sofit']} ‚Äî {letter['sofit_pron']}\n"
    text += f"üìò –ü—Ä–∏–º–µ—Ä: {letter['example']}"

    send(chat_id, text, kb([["‚óÄÔ∏è –ù–∞–∑–∞–¥", "–í–ø–µ—Ä–µÃà–¥ ‚ñ∂Ô∏è"], ["üè† –ú–µ–Ω—é"]]))

    progress.setdefault(uid, set()).add(letter["char"])
    if len(progress[uid]) == len(ALPHA):
        congrats_alpha(chat_id, uid)

# ---------- –ø—Ä–∞–≤–∏–ª–∞ ----------
def show_rule(chat_id, uid):
    idx  = users[uid]["idx"] % len(RULES)
    rule = RULES[idx]
    send(chat_id,
         f"üìú {rule['title']}\n\n{rule['body']}",
         kb([["‚óÄÔ∏è –ù–∞–∑–∞–¥", "–í–ø–µ—Ä–µÃà–¥ ‚ñ∂Ô∏è"], ["üè† –ú–µ–Ω—é"]]))
    if idx == len(RULES) - 1:
        congrats_rules(chat_id, uid)

# ---------- –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ----------
def show_achievements(chat_id, uid):
    a = achievements.get(uid, {})
    lines = [
        "üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n",
        "üèÜ –ë—É–∫–≤–æ–≤–µ–¥"       if a.get("letters") else "üîí –ë—É–∫–≤–æ–≤–µ–¥ ‚Äî –∏–∑—É—á–∏ –∞–ª—Ñ–∞–≤–∏—Ç",
        "üèÜ –°–ª–æ–≤–æ–≤–µ–¥"       if a.get("dict")    else "üîí –°–ª–æ–≤–æ–≤–µ–¥ ‚Äî –ø—Ä–æ–∏ÃÜ–¥–∏ –≤—Å–µ —Å–ª–æ–≤–∞",
        "üèÜ –ú–∞—Å—Ç–µ—Ä –∏–≤—Ä–∏—Ç–∞"  if a.get("rules")   else "üîí –ú–∞—Å—Ç–µ—Ä –∏–≤—Ä–∏—Ç–∞ ‚Äî –ø—Ä–æ—á—Ç–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞"
    ]
    send(chat_id, "\n".join(lines), kb([["üè† –ú–µ–Ω—é"]]))

# ---------- —Å–ª–æ–≤–∞—Ä—å: –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ÃÜ –∏ —Å–ª–æ–≤–∞ ----------
def show_dict_menu(chat_id):
    rows = [[DICT_EMOJI[k]] for k in DICT_EMOJI]
    send(chat_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüëá", kb(rows + [["üè† –ú–µ–Ω—é"]]))

def show_dict_word(chat_id, uid):
    cat   = users[uid]["cat"]
    idx   = users[uid]["idx"]
    words = dictionaries[cat]
    heb, phon, rus = words[idx]
    send(chat_id,
         f"üìñ {DICT_EMOJI[cat]}\n"
         f"üî¢ –°–ª–æ–≤–æ {idx+1} / {len(words)}\n\n"
         f"‚Ä¢ <b>{heb}</b>\n"
         f"‚Ä¢ <i>{phon}</i>\n"
         f"‚Ä¢ {rus}",
         kb([["‚óÄÔ∏è –ù–∞–∑–∞–¥", "–í–ø–µ—Ä–µÃà–¥ ‚ñ∂Ô∏è"],
             ["üìñ –°–ª–æ–≤–∞—Ä—å"],
             ["üè† –ú–µ–Ω—é"]]))

    # —Ñ–∏–Ω–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if idx == len(words) - 1:
        send(chat_id,
             "üéâ –¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–∏ÃÜ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!\n"
             "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é, –ø–æ–∫–∞ –º—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ! üòâ",
             kb([["üìñ –°–ª–æ–≤–∞—Ä—å"], ["üè† –ú–µ–Ω—é"]]))
        # –æ—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        ach = achievements.setdefault(uid, {}).setdefault("dict_done", set())
        ach.add(cat)
        if len(ach) == len(dictionaries):
            achievements[uid]["dict"] = True

# ---------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ÃÜ ----------
def handle_text(msg):
    uid, chat_id = msg["from"]["id"], msg["chat"]["id"]
    text = msg.get("text", "")

    # —Å—Ç–∞—Ä—Ç/–º–µ–Ω—é
    if text == "/start" or text == "üè† –ú–µ–Ω—é":
        users.pop(uid, None)
        handle_start(chat_id)
        return

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text.startswith("üî§"):
        users[uid] = {"mode": "alpha", "idx": 0}
        show_letter(chat_id, uid); return
    if text.startswith("üìú"):
        users[uid] = {"mode": "rule",  "idx": 0}
        show_rule(chat_id, uid); return
    if text.startswith("üèÜ"):
        show_achievements(chat_id, uid); return
    if text.startswith("üìñ"):
        show_dict_menu(chat_id)
        users[uid] = {"mode": "dict_menu"}; return

    state = users.get(uid)
    if not state:
        return

    # –∞–ª—Ñ–∞–≤–∏—Ç / –ø—Ä–∞–≤–∏–ª–∞
    if state["mode"] in ("alpha", "rule"):
        if text.startswith("‚óÄÔ∏è"):
            state["idx"] -= 1
        elif text.endswith("‚ñ∂Ô∏è"):
            state["idx"] += 1
        (show_letter if state["mode"] == "alpha" else show_rule)(chat_id, uid)
        return

    # –º–µ–Ω—é —Å–ª–æ–≤–∞—Ä—è ‚Äî –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if state["mode"] == "dict_menu":
        for key, label in DICT_EMOJI.items():
            if text.startswith(label.split()[0]):
                users[uid] = {"mode": "dict_cat", "cat": key, "idx": 0}
                show_dict_word(chat_id, uid)
                return

    # –ª–∏—Å—Ç–∞–Ω–∏–µ —Å–ª–æ–≤
    if state["mode"] == "dict_cat":
        if text.startswith("‚óÄÔ∏è") and state["idx"] > 0:
            state["idx"] -= 1
        elif text.endswith("‚ñ∂Ô∏è") and state["idx"] < len(dictionaries[state["cat"]]) - 1:
            state["idx"] += 1
        elif text.startswith("üìñ"):
            users[uid] = {"mode": "dict_menu"}
            show_dict_menu(chat_id); return
        show_dict_word(chat_id, uid)

# ---------- –æ—Å–Ω–æ–≤–Ω–æ–∏ÃÜ —Ü–∏–∫–ª ----------
while True:
    try:
        upd = tg("getUpdates", {"timeout": 30, "offset": offset})
    except Exception as e:
        print("getUpdates fail:", e); time.sleep(5); continue

    if not upd or "result" not in upd:
        time.sleep(2); continue

    for res in upd["result"]:
        offset = res["update_id"] + 1
        if "message" in res:
            handle_text(res["message"])
